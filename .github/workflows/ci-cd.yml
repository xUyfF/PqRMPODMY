# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write    # Add permission to write packages

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        cd backend && npm install
        cd ../frontend && npm install
        
    # - name: Run Tests
    #   run: |
    #     cd backend && npm test
    #     cd ../frontend && npm test
        
    - name: Run Linting
      run: |
        cd backend && npm run lint
        cd ../frontend && npm run lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write    # Add permission at job level
      contents: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and Push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./docker/Dockerfile.backend
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:latest
        
    - name: Build and Push Frontend
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.frontend
        push: true
        tags: ghcr.io/${{ github.repository }}/frontend:latest
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Deploy to Kubernetes
      run: |
        # Write kubeconfig
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
        
        # Set KUBECONFIG environment variable
        export KUBECONFIG=./kubeconfig
        
        # Validate the connection
        kubectl cluster-info
        
        # Apply configurations with validation disabled for initial setup
        kubectl apply -f k8s/production/ --validate=false
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}